generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CommunityComment {
  id                   Int                    @id @default(autoincrement())
  comment              String
  createdAt            DateTime               @default(now())
  userId               String
  postId               Int
  parentId             String?
  communityPost        CommunityPost          @relation("CommunityComment", fields: [postId], references: [id], onDelete: Cascade)
  user                 User                   @relation("UserCommunityComment", fields: [userId], references: [id], onDelete: Cascade)
  communityCommentLike CommunityCommentLike[] @relation("CommunityCommentLike")
}

model CommunityCommentLike {
  communityCommentId Int
  userId             String
  communityComment   CommunityComment @relation("CommunityCommentLike", fields: [communityCommentId], references: [id], onDelete: Cascade)
  user               User             @relation("UserCommunityCommentLike", fields: [userId], references: [id], onDelete: Cascade)

  @@id([communityCommentId, userId])
}

model CommunityPost {
  id                Int                        @id @default(autoincrement())
  userId            String
  title             String
  content           String
  createdAt         DateTime                   @default(now())
  view              Int                        @default(0)
  status            String                     @default("recruiting")
  communityComment  CommunityComment[]         @relation("CommunityComment")
  user              User                       @relation("UserCommunityPost", fields: [userId], references: [id], onDelete: Cascade)
  communityPostLike CommunityPostLike[]        @relation("CommunityPostLike")
  PostRecruitment   CommunityPostRecruitment[] @relation("PostRecruitment")
}

model RecruitmentCategory {
  id                       Int                        @id @default(autoincrement())
  name                     String
  CommunityPostRecruitment CommunityPostRecruitment[] @relation("PostRecruitment")
}

model CommunityPostRecruitment {
  postId                Int
  recruitmentCategoryId Int
  CommunityPost         CommunityPost       @relation("PostRecruitment", fields: [postId], references: [id], onDelete: Cascade)
  RecruitmentCategory   RecruitmentCategory @relation("PostRecruitment", fields: [recruitmentCategoryId], references: [id], onDelete: Cascade)

  @@id([postId, recruitmentCategoryId])
}

model CommunityPostLike {
  userId        String
  postId        Int
  communityPost CommunityPost @relation("CommunityPostLike", fields: [postId], references: [id], onDelete: Cascade)
  user          User          @relation("UserCommunityPostLike", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Funding {
  id          Int           @id @default(autoincrement())
  userId      String
  novelId     Int           @unique
  amount      Int
  status      String        @default("pending")
  createdAt   DateTime      @default(now())
  endDate     DateTime
  novel       Novel         @relation(fields: [novelId], references: [id], onDelete: Cascade)
  fundingUser FundingUser[] @relation("FundingUser")
}

model FundingUser {
  id        Int      @id @default(autoincrement())
  userId    String?
  fundingId Int
  amount    Int
  createdAt DateTime @default(now())
  funding   Funding  @relation("FundingUser", fields: [fundingId], references: [id], onDelete: NoAction)
  user      User?    @relation("UserFunding", fields: [userId], references: [id])

  @@unique([userId, fundingId])
}

model Genre {
  id         Int          @id @default(autoincrement())
  genreName  String
  novelGenre NovelGenre[] @relation("CommunityPostGenre")
}

model Novel {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  image          String?
  title          String
  serialDay      String
  novelIntroduce String
  serialStatus   String
  userId         String
  funding        Funding?
  user           User           @relation("UserNovel", fields: [userId], references: [id], onDelete: Cascade)
  novelComment   NovelComment[] @relation("NovelComment")
  novelEpisode   NovelEpisode[] @relation("NovelEpisode")
  novelGenre     NovelGenre[]   @relation("NovelGenre")
  novelLike      NovelLike[]    @relation("NovelLike")
}

model NovelComment {
  id               Int                @id @default(autoincrement())
  novelEpisodeId   Int
  userId           String
  novelId          Int
  content          String
  createdAt        DateTime           @default(now())
  novelEpisode     NovelEpisode       @relation(fields: [novelEpisodeId], references: [id])
  novel            Novel              @relation("NovelComment", fields: [novelId], references: [id], onDelete: Cascade)
  user             User               @relation("UserNovelComment", fields: [userId], references: [id], onDelete: Cascade)
  novelCommentLike NovelCommentLike[] @relation("NovelCommentLike")
}

model NovelCommentLike {
  novelCommentId Int
  userId         String
  novelComment   NovelComment @relation("NovelCommentLike", fields: [novelCommentId], references: [id], onDelete: Cascade)
  user           User         @relation("UserNovelCommentLike", fields: [userId], references: [id], onDelete: Cascade)

  @@id([novelCommentId, userId])
}

model NovelEpisode {
  id           Int            @id @default(autoincrement())
  novelId      Int
  userId       String
  episode      Int
  content      String
  view         Int            @default(0)
  createdAt    DateTime       @default(now())
  title        String
  novelComment NovelComment[]
  novel        Novel          @relation("NovelEpisode", fields: [novelId], references: [id], onDelete: Cascade)
  user         User           @relation("UserNovelEpisode", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([novelId, episode])
}

model NovelGenre {
  genreId Int
  novelId Int
  genre   Genre @relation("CommunityPostGenre", fields: [genreId], references: [id])
  novel   Novel @relation("NovelGenre", fields: [novelId], references: [id], onDelete: Cascade)

  @@id([genreId, novelId])
}

model NovelLike {
  userId  String
  novelId Int
  novel   Novel  @relation("NovelLike", fields: [novelId], references: [id], onDelete: Cascade)
  user    User   @relation("UserNovelLike", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, novelId])
}

model User {
  id                   String                 @id @unique @default(uuid())
  nickname             String                 @unique
  userEmail            String                 @unique
  password             String
  createdAt            DateTime               @default(now())
  type                 String                 @default("user")
  introduce            String
  profileImage         String?
  communityComment     CommunityComment[]     @relation("UserCommunityComment")
  communityCommentLike CommunityCommentLike[] @relation("UserCommunityCommentLike")
  communityPost        CommunityPost[]        @relation("UserCommunityPost")
  communityPostLike    CommunityPostLike[]    @relation("UserCommunityPostLike")
  fundingUser          FundingUser[]          @relation("UserFunding")
  novel                Novel[]                @relation("UserNovel")
  novelComment         NovelComment[]         @relation("UserNovelComment")
  novelCommentLike     NovelCommentLike[]     @relation("UserNovelCommentLike")
  novelEpisode         NovelEpisode[]         @relation("UserNovelEpisode")
  novelLike            NovelLike[]            @relation("UserNovelLike")
  RefreshToken         RefreshToken?
}

model RefreshToken {
  id        String   @id
  token     String   @unique
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
