generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model communityComment {
  id                   Int                    @id @default(autoincrement())
  comment              String
  createdAt            DateTime               @default(now())
  userId               String
  postId               Int
  parentId             String?
  communityPost        communityPost          @relation("CommunityComment",fields: [postId], references: [id], onDelete: Cascade)
  user                 user                   @relation("UserCommunityComment",fields: [userId], references: [id], onDelete: Cascade)
  communityCommentLike communityCommentLike[] @relation("CommunityCommentLike")
}

model communityCommentLike {
  communityCommentId Int
  userId             String
  communityComment   communityComment @relation("CommunityCommentLike",fields: [communityCommentId], references: [id], onDelete: Cascade)
  user               user             @relation("UserCommunityCommentLike",fields: [userId], references: [id], onDelete: Cascade)

  @@id([communityCommentId, userId])
}

model communityPost {
  id                 Int                  @id @default(autoincrement())
  userId             String
  title              String
  content            String
  createdAt          DateTime             @default(now())
  view               Int                  @default(0)
  status String @default("recruiting") // recruiting, completed
  communityComment   communityComment[] @relation("CommunityComment")
  user               user                 @relation("UserCommunityPost",fields: [userId], references: [id], onDelete: Cascade)
  communityPostLike  communityPostLike[] @relation("CommunityPostLike")
  communityRecruitmentFields communityRecruitmentField[] @relation("PostRecruitment")
}

model communityRecruitmentField {
  id Int @id @default(autoincrement())
  postId Int
  field String 

  post communityPost[] @relation("PostRecruitment")
}


model communityPostLike {
  userId        String
  postId        Int
  communityPost communityPost @relation("CommunityPostLike",fields: [postId], references: [id], onDelete: Cascade)
  user          user          @relation("UserCommunityPostLike",fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model funding {
  id          Int           @id @default(autoincrement())
  userId      String
  novelId     Int           @unique
  amount      Int
  status      String        @default("pending")
  createdAt   DateTime      @default(now())
  endDate     DateTime
  novel       novel         @relation(fields: [novelId], references: [id], onDelete: Cascade)
  fundingUser fundingUser[] @relation("FundingUser")
}

model fundingUser {
  id        Int      @id @default(autoincrement())
  userId    String?
  fundingId Int
  amount    Int
  createdAt DateTime @default(now())
  funding   funding  @relation("FundingUser",fields: [fundingId], references: [id], onDelete: NoAction)
  user      user?    @relation("UserFunding",fields: [userId], references: [id], onDelete: SetNull)

  @@unique([userId, fundingId])
}

model genre {
  id                 Int                  @id @default(autoincrement())
  genreName          String
  novelGenre         novelGenre[] @relation("CommunityPostGenre")
}

model novel {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  image          String?
  title          String
  serialDay      String
  novelIntroduce String
  serialStatus   String
  userId         String
  funding        funding?
  user           user           @relation("UserNovel",fields: [userId], references: [id], onDelete: Cascade)
  novelComment   novelComment[] @relation("NovelComment")
  novelEpisode   novelEpisode[] @relation("NovelEpisode")
  novelGenre     novelGenre[] @relation("NovelGenre")
  novelLike      novelLike[] @relation("NovelLike")
}

model novelComment {
  id               Int                @id @default(autoincrement())
  novelEpisodeId   Int
  userId           String
  novelId          Int
  content          String
  createdAt        DateTime           @default(now())
  novelEpisode     novelEpisode       @relation(fields: [novelEpisodeId], references: [id])
  novel            novel              @relation("NovelComment",fields: [novelId], references: [id], onDelete: Cascade)
  user             user               @relation("UserNovelComment",fields: [userId], references: [id], onDelete: Cascade)
  novelCommentLike novelCommentLike[] @relation("NovelCommentLike")
}

model novelCommentLike {
  novelCommentId Int
  userId         String
  novelComment   novelComment @relation("NovelCommentLike",fields: [novelCommentId], references: [id], onDelete: Cascade)
  user           user         @relation("UserNovelCommentLike",fields: [userId], references: [id], onDelete: Cascade)

  @@id([novelCommentId, userId])
}

model novelEpisode {
  id           Int            @id @default(autoincrement())
  novelId      Int
  userId       String
  episode      Int
  title        String         
  content      String
  view         Int            @default(0)
  createdAt    DateTime       @default(now())
  novelComment novelComment[]
  novel        novel          @relation("NovelEpisode",fields: [novelId], references: [id], onDelete: Cascade)
  user         user           @relation("UserNovelEpisode",fields: [userId], references: [id], onDelete: Cascade)

  @@unique([novelId, episode])
}

model novelGenre {
  genreId Int
  novelId Int
  genre   genre @relation("CommunityPostGenre",fields: [genreId], references: [id])
  novel   novel @relation("NovelGenre",fields: [novelId], references: [id], onDelete: Cascade)

  @@id([genreId, novelId])
}

model novelLike {
  userId  String
  novelId Int
  novel   novel  @relation("NovelLike",fields: [novelId], references: [id], onDelete: Cascade)
  user    user   @relation("UserNovelLike",fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, novelId])
}

model user {
  id                   String                 @id @default(uuid())
  nickname             String                 @unique
  userEmail            String                 @unique
  password             String
  createdAt            DateTime               @default(now())
  type                 String                 @default("user")
  introduce            String
  novel   novel[] @relation("UserNovel")
  communityPost communityPost[] @relation("UserCommunityPost")
  communityComment communityComment[] @relation("UserCommunityComment")
  communityCommentLike communityCommentLike[] @relation("UserCommunityCommentLike")
  novelLike novelLike[] @relation("UserNovelLike")
  communityPostLike communityPostLike[] @relation("UserCommunityPostLike")
  novelEpisode novelEpisode[] @relation("UserNovelEpisode")
  novelComment novelComment[] @relation("UserNovelComment")
  novelCommentLike novelCommentLike[] @relation("UserNovelCommentLike")
  fundingUser fundingUser[] @relation("UserFunding")
}
