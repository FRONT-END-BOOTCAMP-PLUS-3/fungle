generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CommunityComment {
  id                    Int                    @id @default(autoincrement())
  comment               String
  createdAt             DateTime               @default(now())
  userId                String
  postId                Int
  parentId              Int?
  parent                CommunityComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies               CommunityComment[]     @relation("CommentReplies")
  communityPost         CommunityPost          @relation("CommunityComments", fields: [postId], references: [id], onDelete: Cascade)
  user                  User                   @relation("UserCommunityComments", fields: [userId], references: [id], onDelete: Cascade)
  communityCommentLikes CommunityCommentLike[] @relation("CommunityCommentLikes")
}

model CommunityCommentLike {
  communityCommentId Int
  userId             String
  communityComments  CommunityComment @relation("CommunityCommentLikes", fields: [communityCommentId], references: [id], onDelete: Cascade)
  user               User             @relation("UserCommunityCommentLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@id([communityCommentId, userId])
}

model CommunityPost {
  id                 Int                        @id @default(autoincrement())
  userId             String
  title              String
  content            String
  createdAt          DateTime                   @default(now())
  view               Int                        @default(0)
  status             String                     @default("recruiting")
  communityComments  CommunityComment[]         @relation("CommunityComments")
  user               User                       @relation("UserCommunityPosts", fields: [userId], references: [id], onDelete: Cascade)
  communityPostLikes CommunityPostLike[]        @relation("CommunityPostLikes")
  PostRecruitments   CommunityPostRecruitment[] @relation("PostRecruitments")
}

model RecruitmentCategory {
  id                        Int                        @id @default(autoincrement())
  name                      String  @unique
  CommunityPostRecruitments CommunityPostRecruitment[] @relation("PostRecruitments")
}

model CommunityPostRecruitment {
  postId                Int
  recruitmentCategoryId Int
  CommunityPost         CommunityPost       @relation("PostRecruitments", fields: [postId], references: [id], onDelete: Cascade)
  RecruitmentCategory   RecruitmentCategory @relation("PostRecruitments", fields: [recruitmentCategoryId], references: [id], onDelete: Cascade)

  @@id([postId, recruitmentCategoryId])
}

model CommunityPostLike {
  userId         String
  postId         Int
  communityPosts CommunityPost @relation("CommunityPostLikes", fields: [postId], references: [id], onDelete: Cascade)
  user           User          @relation("UserCommunityPostLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Funding {
  id           String           @id @default(uuid())
  userId       String
  novelId      Int           @unique
  goalAmount  Int
  currentAmount Int  @default(0)
  createdAt    DateTime      @default(now())
  endDate      DateTime
  rewardType  String?  // "전자책", "종이책", "굿즈"
  status String @default("ongoing") // "ongoing", "completed"
  introduce String? 
  novel        Novel         @relation(fields: [novelId], references: [id], onDelete: Cascade)
  fundingUsers FundingUser[] @relation("FundingUsers")
  fundingStages FundingStage[] @relation("FundingStages")
}

model FundingStage {
  id           Int           @id @default(autoincrement())
  fundingId   String
  stageNumber Int @default(1)
  isActive  Boolean @default(false)
  

  funding Funding @relation("FundingStages", fields: [fundingId], references: [id], onDelete: Cascade)
}

model FundingUser {
  id        Int      @id @default(autoincrement())
  userId    String?
  fundingId String
  amount    Int
  createdAt DateTime @default(now())
  funding   Funding  @relation("FundingUsers", fields: [fundingId], references: [id], onDelete: NoAction)
  user      User?    @relation("UserFundings", fields: [userId], references: [id])

  @@unique([userId, fundingId])
}

model Genre {
  id          Int          @id @default(autoincrement())
  genreName   String
  novelGenres NovelGenre[] @relation("CommunityPostGenres")
}

model Novel {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  image          String?
  title          String
  serialDay      String
  novelIntroduce String
  serialStatus   String  @default("pending")
  userId         String
  bannerImage    String?
  funding        Funding?
  user           User           @relation("UserNovels", fields: [userId], references: [id], onDelete: Cascade)
  novelComments  NovelComment[] @relation("NovelComments")
  novelEpisodes  NovelEpisode[] @relation("NovelEpisodes")
  novelGenres    NovelGenre[]   @relation("NovelGenres")
  novelLikes     NovelLike[]    @relation("NovelLikes")
}

model NovelComment {
  id               Int                @id @default(autoincrement())
  comment          String
  createdAt        DateTime           @default(now())
  userId           String
  episodeId        Int
  novelId          Int   
  parentId         Int?

  parent           NovelComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies          NovelComment[]     @relation("CommentReplies")
  episode          NovelEpisode       @relation("NovelComments", fields: [episodeId], references: [id], onDelete: Cascade)
  novel            Novel              @relation("NovelComments", fields: [novelId], references: [id], onDelete: Cascade)  // ✅ 반대 관계 추가
  user             User               @relation("UserNovelComments", fields: [userId], references: [id], onDelete: Cascade)
  novelCommentLike NovelCommentLike[] @relation("NovelCommentLike")
}



model NovelCommentLike {
  novelCommentId Int
  userId         String
  novelComment   NovelComment @relation("NovelCommentLike", fields: [novelCommentId], references: [id], onDelete: Cascade)
  user           User         @relation("UserNovelCommentLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@id([novelCommentId, userId])
}

model NovelEpisode {
  id           Int            @id @default(autoincrement())
  novelId      Int
  userId       String
  episode      Int
  content      String
  view         Int            @default(0)
  createdAt    DateTime       @default(now())
  title        String
  status       String         @default("pending")
  isFinalEpisode  Boolean @default(false)
  novelComments NovelComment[]  @relation("NovelComments")
  novel        Novel          @relation("NovelEpisodes", fields: [novelId], references: [id], onDelete: Cascade)
  user         User           @relation("UserNovelEpisodes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([novelId, episode])
}

model NovelGenre {
  genreId Int
  novelId Int
  genre   Genre @relation("CommunityPostGenres", fields: [genreId], references: [id])
  novel   Novel @relation("NovelGenres", fields: [novelId], references: [id], onDelete: Cascade)

  @@id([genreId, novelId])
}

model NovelLike {
  userId  String
  novelId Int
  novel   Novel  @relation("NovelLikes", fields: [novelId], references: [id], onDelete: Cascade)
  user    User   @relation("UserNovelLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, novelId])
}

model User {
  id                    String                 @id @unique @default(uuid())
  nickname              String                 @unique
  userEmail             String                 @unique
  password              String
  createdAt             DateTime               @default(now())
  type                  String                 @default("user")
  introduce             String
  profileImage          String?
  communityComments     CommunityComment[]     @relation("UserCommunityComments")
  communityCommentLikes CommunityCommentLike[] @relation("UserCommunityCommentLikes")
  communityPosts        CommunityPost[]        @relation("UserCommunityPosts")
  communityPostLikes    CommunityPostLike[]    @relation("UserCommunityPostLikes")
  fundingUsers          FundingUser[]          @relation("UserFundings")
  novels                Novel[]                @relation("UserNovels")
  novelComments         NovelComment[]         @relation("UserNovelComments")
  novelCommentLikes     NovelCommentLike[]     @relation("UserNovelCommentLikes")
  novelEpisodes         NovelEpisode[]         @relation("UserNovelEpisodes")
  novelLikes            NovelLike[]            @relation("UserNovelLikes")
  RefreshToken          RefreshToken?
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}